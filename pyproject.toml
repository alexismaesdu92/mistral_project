[build-system]
requires = ["setuptools >= 61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mistral-chatbot"
version = "0.1.0"
description = "Interface web chatbot avec agent Mistral AI pour répondre aux questions sur la documentation et aider en cas d'erreurs"
authors = [
    { name = "Alexis Maes", email = "alexismaes1@gmail.com" }
]
maintainers = [
    { name = "Alexis Maes", email = "alexismaes1@gmail.com" }
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11,<3.13"
keywords = ["mistral", "ai", "chatbot", "fastapi", "web", "assistant"]


dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "mistralai>=1.0.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.25.0",
    "pydantic>=2.0.0",
    "python-multipart>=0.0.6",
    "chromadb>=0.4.0",
    "tqdm>=4.65.0",
    "beautifulsoup4>=4.12.0",
    "markdownify>=0.11.0",
    "python-slugify>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
]

[project.scripts]
mistral-chatbot = "back_end.app.main:main"


[tool.setuptools]
package-dir = {"" = "back_end"}

[tool.setuptools.packages.find]
where = ["back_end"]
include = ["back_end*"]


[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

# Configuration pour pytest
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=back_end",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["back_end/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

# Configuration pour coverage
[tool.coverage.run]
source = ["back_end"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Configuration pour Black (formatage du code)
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | front_end
)/
'''

# Configuration pour isort (tri des imports)
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["back_end"]
skip_glob = ["front_end/*", ".venv/*"]

# Configuration pour mypy (vérification de types)
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "front_end/",
    ".venv/",
    "build/",
    "dist/",
]

[[tool.mypy.overrides]]
module = [
    "mistralai.*",
]
ignore_missing_imports = true
